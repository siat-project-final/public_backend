SET client_encoding = 'UTF8';


-- #DDL
-- 유저
CREATE TABLE members (
    member_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    id VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    member_name VARCHAR(255) NULL,
    email VARCHAR(255) NULL,
    phone_number VARCHAR(255) NULL,
    nickname VARCHAR(255) NOT NULL,
    role VARCHAR(255) DEFAULT 'TRAINEE' NOT NULL,
    status VARCHAR(255) DEFAULT 'ACTIVE' NOT NULL,
    total_xp INTEGER DEFAULT 0 NULL,
    usable_points INTEGER DEFAULT 0 NULL,
    current_level INTEGER DEFAULT 1 NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL,
    is_deleted BOOLEAN DEFAULT FALSE NOT NULL,
    member_image_url VARCHAR(255) DEFAULT 'DEFAULT.com' NULL
);

CREATE TABLE mentors (
  mentor_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  company VARCHAR(255),
  position VARCHAR(255),
  description VARCHAR(255),
  avail_weekdays VARCHAR(255),
  completion_date TIMESTAMP(0),
  open_chat_url VARCHAR(255),
  is_deleted BOOLEAN,
  created_at TIMESTAMP(0),
  updated_at TIMESTAMP(0),
  mentor_image_url VARCHAR(255),
  mentor_name VARCHAR(255),
  member_id BIGINT NOT NULL
);

CREATE TABLE refresh_tokens (
	refresh_token_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	member_id BIGINT NOT NULL,
	token VARCHAR(255) NOT NULL,
	expired_at TIMESTAMP(0) NULL,
	created_at TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP NULL
);

-- 멘토링
CREATE TABLE mentorings_reservation (
  reservation_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  mentor_id BIGINT NOT NULL,
  mentee_id BIGINT NOT NULL,
  introduction TEXT NULL,
  date TIMESTAMP(0) NOT NULL,
  subject VARCHAR(255) DEFAULT NULL,
  status VARCHAR(255) DEFAULT 'PENDING' NOT NULL,
  created_at TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP,
  is_deleted BOOLEAN DEFAULT FALSE NOT NULL,

  cancel_reason	VARCHAR(255)		NULL,
  reject_reason	VARCHAR(255)		NULL,

  -- ✅ 추가: 멘티가 닫은 항목 여부
  is_hidden_by_mentee BOOLEAN DEFAULT FALSE NOT NULL,
  is_hidden_by_mentor BOOLEAN DEFAULT FALSE NOT NULL
);

CREATE TABLE mentorings (
  mentoring_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  mentor_id BIGINT NOT NULL,
  mentee_id BIGINT NOT NULL,
  reservation_id BIGINT NOT NULL,
  status VARCHAR(255) NOT NULL,
  created_at TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP,
  is_deleted BOOLEAN DEFAULT FALSE NOT NULL
);

-- 챌린지
CREATE TABLE problems (
	problem_id	BIGINT	GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	title	VARCHAR(255)    NULL,
	contents	TEXT	NOT NULL,
	type	VARCHAR(255)	NULL,
	difficulty	INTEGER	NULL,
	subject	VARCHAR(255)	NULL,
	is_public	BOOLEAN	DEFAULT TRUE	NULL,
	created_at	TIMESTAMP(0)	DEFAULT CURRENT_TIMESTAMP	NULL,
	updated_at	TIMESTAMP(0)	DEFAULT CURRENT_TIMESTAMP	NULL,
	correct_answer	INTEGER	NOT NULL,
	is_deleted	BOOLEAN	DEFAULT FALSE	NULL,
	choices TEXT    DEFAULT '[]' NULL
);

CREATE TABLE problem_solving (
	problem_solving_id	BIGINT		GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	problem_id	BIGINT		NOT NULL,
	member_id	BIGINT		NOT NULL,
	submit_answer	INTEGER		NOT NULL,
	is_correct	BOOLEAN		NULL,
	points INTEGER		DEFAULT 0 NOT NULL,
	date	TIMESTAMP(0)		NULL,
	is_deleted	BOOLEAN		DEFAULT FALSE NOT NULL
);

CREATE TABLE daily_challenge_rankings (
	daily_ranking_id	BIGINT		GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	member_id	BIGINT		NOT NULL,
	rank_level	INTEGER		NULL,
	updated_at	TIMESTAMP(0)	DEFAULT CURRENT_TIMESTAMP	NULL,
	is_deleted	BOOLEAN		DEFAULT FALSE NOT NULL,
	points	INTEGER		NULL,
	date	DATE		NOT NULL
);

-- 학습일지
CREATE TABLE study_diary (
    diary_id    BIGINT      GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    member_id   BIGINT      NOT NULL,
    contents    VARCHAR(2000),
    title       VARCHAR(255),
    subject     VARCHAR(255),
    created_at  TIMESTAMP   DEFAULT CURRENT_TIMESTAMP,
    updated_at  TIMESTAMP   DEFAULT CURRENT_TIMESTAMP,
    study_date  TIMESTAMP   DEFAULT CURRENT_TIMESTAMP,
    ai_summary  TEXT,
    is_deleted  BOOLEAN DEFAULT FALSE,
    is_public   BOOLEAN,
    likes       INTEGER
);

CREATE TABLE diary_comments (
    comment_id   BIGINT       GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    diary_id     BIGINT       NOT NULL,
    member_id    BIGINT       NOT NULL,
    contents     VARCHAR(255),
    created_at   TIMESTAMP    DEFAULT CURRENT_TIMESTAMP,
    updated_at   TIMESTAMP    DEFAULT CURRENT_TIMESTAMP,
    is_deleted   BOOLEAN DEFAULT FALSE
);

-- 투두
CREATE TABLE todos (
   todo_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
   member_id BIGINT NOT NULL,
   contents VARCHAR(255) NOT NULL,
   date DATE,
   is_checked BOOLEAN DEFAULT FALSE,
   created_at TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP NULL,
   updated_at TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP NULL,
   is_deleted BOOLEAN DEFAULT FALSE
);

-- 멤버 귀속 테이블
CREATE TABLE notification (
	notification_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	member_id BIGINT NOT NULL,
	title VARCHAR(255) NULL,
	contents VARCHAR(255) NULL,
	type VARCHAR(50) DEFAULT 'DEFAULT' NULL,
	is_confirmed BOOLEAN DEFAULT FALSE NULL,
	created_at TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP NULL,
	updated_at TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP NULL
);

CREATE TABLE xp_histories (
	xp_history_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	member_id BIGINT NOT NULL,
	activity_type INTEGER NULL,
	xp_amount INTEGER NULL,
	reference_id BIGINT NULL,
	description TEXT NULL,
	created_at TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP NULL,
	is_deleted BOOLEAN NULL
);

CREATE TABLE badges (
	badge_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	name VARCHAR(255) NULL,
	description TEXT NULL,
	icon_url VARCHAR(255) NULL,
	unlock_condition TEXT NULL,
	required_level INTEGER NULL,
	is_active BOOLEAN DEFAULT TRUE NULL,
	created_at TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP NULL
);

CREATE TABLE member_badges (
	member_badge_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	member_id BIGINT NOT NULL,
	badge_id BIGINT NOT NULL,
	is_equipped BOOLEAN DEFAULT FALSE NULL,
	unlocked_at TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP NULL,
	is_deleted BOOLEAN NULL
);

-- 관리자 입력 테이블
CREATE TABLE students (
	student_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	student_name VARCHAR(255) NOT NULL,
	phone_number VARCHAR(255) NOT NULL
);

CREATE TABLE daily_learning (
	learning_id	BIGINT	GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	contents	VARCHAR(255)		NULL,
	title	VARCHAR(255)		NULL,
	subject	VARCHAR(255)		NULL,
	date	DATE	NOT NULL,
	created_at TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP NULL,
	updated_at TIMESTAMP(0) DEFAULT CURRENT_TIMESTAMP NULL
);

-- 스케줄러 일정
CREATE TABLE schedules (
                           schedule_id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
                           member_id BIGINT NOT NULL,
                           title VARCHAR(100) NOT NULL,
                           content TEXT,
                           start_datetime TIMESTAMP NOT NULL,
                           end_datetime TIMESTAMP NOT NULL,
                           is_all_day BOOLEAN NOT NULL DEFAULT FALSE,
                           color_code VARCHAR(20),
                           is_deleted BOOLEAN NOT NULL DEFAULT FALSE,
                           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                           CONSTRAINT fk_schedule_member FOREIGN KEY (member_id) REFERENCES members(member_id)
);

-- # DML
-- 1. members 테이블에 insert
INSERT INTO members (
    id, password, member_name, email, phone_number, nickname, role, status,
    total_xp, usable_points, current_level, created_at, updated_at, is_deleted
) VALUES
(
    'admin', '1234', '홍길동', 'hong@example.com', '010-1234-5678', '길동이',
    'TRAINEE', 'ACTIVE', 500, 100, 2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, FALSE
),
(
    'test', '1234', '김철수', 'chulsoo@example.com', '010-2345-6789', '철수짱',
    'TRAINEE', 'ACTIVE', 1200, 300, 4, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, FALSE
),
(
    'user', '1234', '이영희', 'younghee@example.com', '010-3456-7890', '영희',
    'TRAINEE', 'ACTIVE', 3000, 500, 6, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, FALSE
),
(
    'alice', '1234', '이수현', 'alice@example.com', '010-4567-8901', '수현이',
    'MENTOR', 'ACTIVE', 800, 150, 3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, FALSE
),
(
    'bob', '1234', '최형규', 'bob@example.com', '010-5678-9012', '형규',
    'MENTOR', 'INACTIVE', 200, 50, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, FALSE
),
(
    'carol', '1234', '박신형', 'carol@example.com', '010-6789-0123', '신형',
    'MENTOR', 'ACTIVE', 4000, 700, 7, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, FALSE
),
(
    'hannah', '1234', '최은정', 'alice@example.com', '010-4567-8901', '오랑이',
    'MENTOR', 'ACTIVE', 800, 150, 3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, FALSE
),
(
    'jo', '1234', '조영석', 'bob@example.com', '010-5678-9012', '영초',
    'MENTOR', 'INACTIVE', 200, 50, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, FALSE
),
(
    'kwon', '1234', '권태현', 'carol@example.com', '010-6789-0123', '태현짱',
    'MENTOR', 'ACTIVE', 4000, 700, 7, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, FALSE
);

-- 2. role이 MENTOR인 사람만 mentors 테이블에도 삽입
INSERT INTO mentors (
    mentor_name,
    mentor_image_url,
    company,
    position,
    description,
    avail_weekdays,
    completion_date,
    open_chat_url,
    is_deleted,
    created_at,
    updated_at,
    member_id
)

SELECT
    m.member_name,
    /* ---------- 이미지 경로 ---------- */
    CASE m.id
        WHEN 'alice'  THEN '/assets/img/mentors/mentor_suhyun.png'     -- 이수현
        WHEN 'bob'    THEN '/assets/img/mentors/mentor_hyung.png'      -- 최형규
        WHEN 'carol'  THEN '/assets/img/mentors/mentor_sinhyung.png'   -- ?
        WHEN 'hannah' THEN '/assets/img/mentors/mentor_eunjung.png'    -- 최은정
        WHEN 'jo'     THEN '/assets/img/mentors/mentor_youngseok.png'  -- 조영석
        WHEN 'kwon'   THEN '/assets/img/mentors/mentor_taehyun.png'    -- 권태현
        ELSE NULL
        END                                   AS mentor_image_url,

    /* ---------- 회사 ---------- */
    CASE m.id
        WHEN 'alice'  THEN '삼성전자'
        WHEN 'bob'    THEN '네이버'
        WHEN 'carol'  THEN '카카오'
        WHEN 'hannah' THEN '라인플러스'
        WHEN 'jo'     THEN '쿠팡'
        WHEN 'kwon'   THEN '토스'
        ELSE '기타'
        END                                   AS company,

    /* ---------- 직무 ---------- */
    CASE m.id
        WHEN 'alice'  THEN 'Frontend Developer'
        WHEN 'bob'    THEN 'Backend Developer'
        WHEN 'carol'  THEN 'DevOps Engineer'
        WHEN 'hannah' THEN 'Product Designer'
        WHEN 'jo'     THEN 'Data Engineer'
        WHEN 'kwon'   THEN 'Android Developer'
        ELSE '멘토'
        END                                   AS position,

        /* ---------- 소개 ---------- */
        CASE m.id
            WHEN 'alice'  THEN 'React · TypeScript UI 설계 멘토링'
            WHEN 'bob'    THEN 'Spring Boot · JPA 최적화 코칭'
            WHEN 'carol'  THEN 'CI/CD · Kubernetes 실전 경험 공유'
            WHEN 'hannah' THEN 'UX/UI 디자인 시스템 구축 경험 공유'
            WHEN 'jo'     THEN '데이터 파이프라인 · ETL 실무 사례 제공'
            WHEN 'kwon'   THEN 'Jetpack Compose · Kotlin 심화 지도'
            ELSE ''
END                                   AS description,

        /* ---------- 공통/임시 값 ---------- */
        'MON,TUE,WED'                         AS avail_weekdays,
        '2025-12-31 23:59:59'                 AS completion_date,

        /* ---------- 오픈채팅 ---------- */
        CASE m.id
            WHEN 'alice'  THEN 'https://open.kakao.com/o/alice-dev'
            WHEN 'bob'    THEN 'https://open.kakao.com/o/bob-dev'
            WHEN 'carol'  THEN 'https://open.kakao.com/o/carol-dev'
            WHEN 'hannah' THEN 'https://open.kakao.com/o/eunjung-ux'
            WHEN 'jo'     THEN 'https://open.kakao.com/o/youngseok-data'
            WHEN 'kwon'   THEN 'https://open.kakao.com/o/taehyun-android'
            ELSE ''
END                                   AS open_chat_url,

        /* ---------- 공통 메타 ---------- */
        FALSE                                 AS is_deleted,
        NOW()                                 AS created_at,
        NOW()                                 AS updated_at,
        m.member_id                           -- FK
FROM
        members m
WHERE
        m.role = 'MENTOR';

INSERT INTO students (student_name, phone_number)
VALUES
    ('김정섭', '01012345678'),
    ('이영희', '01087654321'),
    ('최지은', '01098765432'),
    ('최영구', '01011223344'),
    ('이수연', '01023456789'),
    ('박신영', '01084369852'),
    ('최은성', '01055667784');

INSERT INTO daily_learning (contents, title, subject, date)
VALUES
('Java의 기본 데이터 타입에 대해 학습했습니다. int, char, boolean 등의 특징을 익혔습니다.',
        'Java 기본 데이터 타입',
        'JavaScript',
        '2025-06-15'),
('Python의 기본 데이터 타입에 대해 학습했습니다. int, char, boolean 등의 특징을 익혔습니다.',
        'Python 기본 데이터 타입',
        'Python',
        '2025-06-14'),
('Python의 기본 데이터 타입에 대해 학습했습니다. int, char, boolean 등의 특징을 익혔습니다.',
        'Python 기본 데이터 타입',
        'JAVA',
        '2025-06-20'),
('Python의 기본 데이터 타입에 대해 학습했습니다. int, char, boolean 등의 특징을 익혔습니다.',
        'Python 기본 데이터 타입',
        'React.js',
        '2025-06-16'),
('Python의 기본 데이터 타입에 대해 학습했습니다. int, char, boolean 등의 특징을 익혔습니다.',
        'Python 기본 데이터 타입',
        'Vue.js',
        '2025-06-22'),
('Python의 기본 데이터 타입에 대해 학습했습니다. int, char, boolean 등의 특징을 익혔습니다.',
        'Python 기본 데이터 타입',
        'Vue.js',
        '2025-06-23'),
('Python의 기본 데이터 타입에 대해 학습했습니다. int, char, boolean 등의 특징을 익혔습니다.',
        'Python 기본 데이터 타입',
        'Vue.js',
        '2025-05-23'),
('Python의 기본 데이터 타입에 대해 학습했습니다. int, char, boolean 등의 특징을 익혔습니다.',
        'Python 기본 데이터 타입',
        'Vue.js',
        '2025-06-24');

-- 멘토링
INSERT INTO mentorings_reservation (
    mentor_id,
    mentee_id,
    introduction,
    subject,
    date,
    status
)
VALUES
(
   1,
   1,
   'Spring',
   'Spring Boot JPA',
   '2025-06-20T14:30',
   'COMPLETED'
),(
   1,
   1,
   'Spring',
   'Spring Boot JPA',
   '2025-05-20T14:30',
                        'COMPLETED'
),(
   1,
   1,
   'Spring',
   'JAVA',
   '2025-06-21T14:30',
                        'COMPLETED'
);

INSERT INTO mentorings (
    mentor_id,
    mentee_id,
    reservation_id,
    status,
    created_at
) VALUES (
    '1',
    '1',
    1,
    'COMPLETED',
    NOW()
),(
    '1',
    '1',
    2,
    'COMPLETED',
    NOW()
 );

-- 챌린지
INSERT INTO problem_solving
(
    problem_id,
    member_id,
    submit_answer,
    is_correct,
    points,
    date
)
VALUES
    (
        1,
        1,
        1,
        true,
        1,
        '2025-06-25'
    )
 ,
    (
        2,
        1,
        2,
        true,
        2,
        '2025-06-25'
    )
 ,
    (
        3,
        1,
        1,
        false,
        0,
        '2025-06-25'
    )
 ,
    (
        4,
        1,
        4,
        true,
        4,
        '2025-06-25'
    )
 ,
    (
        5,
        1,
        5,
        true,
        5,
        '2025-06-30'
    );

INSERT INTO daily_challenge_rankings
(
member_id,
rank_level,
points,
date
  )
VALUES
(1, 1, 14, CAST('2025-06-30' AS DATE)),
(2, 2, 14, CAST('2025-06-30' AS DATE)),
(3, 3, 13, CAST('2025-06-30' AS DATE)),
(1, 1, 14, CAST('2025-06-25' AS DATE)),
(2, 2, 12, CAST('2025-06-25' AS DATE)),
(1, 1, 14, CAST('2025-06-30' AS DATE)),
(2, 2, 14, CAST('2025-06-30' AS DATE));

INSERT INTO study_diary
(
    member_id,
    contents,
    title,
    subject,
    created_at,
    updated_at,
    study_date,
    ai_summary,
    is_deleted,
    is_public,
    likes
)
VALUES
    (1,  'Java와 Spring Boot 기본 개념 정리', 'Java 스프링 입문', 'Java', NOW(), NOW(), '2025-06-19 10:00:00', '스프링 부트의 핵심 개념 요약', FALSE, TRUE, 5),
    (2,  '데이터베이스 트랜잭션과 인덱스 이해', 'DB 트랜잭션 공부', 'Database', NOW(), NOW(), '2025-06-18 14:30:00', '트랜잭션의 중요성과 인덱스 활용법 요약', FALSE, FALSE, 3),
    (3,  'REST API 설계 원칙', 'REST API 설계', 'API', NOW(), NOW(), '2025-06-17 09:00:00', 'REST API의 기본 설계 원칙 설명', FALSE, TRUE, 10),
    (1,  'JPA와 Hibernate 매핑 이해', 'JPA 매핑', 'Java', NOW(), NOW(), '2025-06-16 16:00:00', '엔티티 매핑과 연관관계 설명', FALSE, TRUE, 7),
    (4,  'AWS EC2 인스턴스 생성 및 설정', 'AWS 입문', 'Cloud', NOW(), NOW(), '2025-06-15 11:00:00', 'AWS EC2 사용법과 설정 요약', FALSE, FALSE, 1);

INSERT INTO diary_comments (diary_id, member_id, contents)
VALUES
    (1, 1, '첫 번째 댓글입니다.'),
    (1, 1, '두 번째 댓글, 좋은 글이네요!'),
    (2, 1, '질문이 있습니다. 설명 부탁드려요.'),
    (3, 1, '감사합니다. 많은 도움이 됐어요.'),
    (2, 1, '흥미로운 내용이네요. 잘 읽었습니다.');

INSERT INTO todos (member_id, contents, date, is_checked, is_deleted)
VALUES
(1, '스터디 준비하기', '2025-06-22', false, false),
(1, '운동 1시간 하기', '2025-06-22', true, false),
(1, '강의 수강 완료', '2025-06-21', true, false),
(1, '코딩 연습 2문제', '2025-06-21', false, false),
(1, '회의 참석', '2025-06-20', true, false),
(1, '문서 작성', '2025-06-20', false, true),
(1, '이메일 정리', '2025-06-19', true, false),
(1, '플젝 리팩토링', '2025-06-19', false, false),
(1, '블로그 포스팅', '2025-06-18', true, false),
(1, '알고리즘 복습', '2025-06-18', false, false);

INSERT INTO problems (
    title,
    contents,
    difficulty,
    subject,
    correct_answer,
    choices,
    created_at
) VALUES 
(
  '다음 중 Java에서 사용되는 기본 데이터 타입(Primitive Type)이 아닌 것은?',
  '다음 중 Java에서 사용되는 기본 데이터 타입(Primitive Type)이 아닌 것은?\n\n1. byte\n2. String\n3. int\n4. char\n\n',
  1,
  'JAVA',
  2,
  CAST('["1. byte","2. String","3. int","4. char"]' AS jsonb),
  CAST('2025-06-30 00:00:00' AS TIMESTAMP)
),
(
  'Java에서 추상 클래스(Abstract Class)에 대한 설명으로 옳지 않은 것은?',
  'Java에서 추상 클래스(Abstract Class)에 대한 설명으로 옳지 않은 것은?\n\n1. 추상 클래스는 abstract 키워드를 사용하여 선언한다\n2. 추상 클래스는 new 연산자를 통해 직접 인스턴스를 생성할 수 있다\n3. 추상 클래스는 일반 메소드와 추상 메소드를 모두 포함할 수 있다\n4. 추상 클래스를 상속받은 자식 클래스는 추상 메소드를 반드시 구현해야 한다\n\n',
  2,
  'JAVA',
  2,
  CAST('["1. 추상 클래스는 abstract 키워드를 사용하여 선언한다","2. 추상 클래스는 new 연산자를 통해 직접 인스턴스를 생성할 수 있다","3. 추상 클래스는 일반 메소드와 추상 메소드를 모두 포함할 수 있다","4. 추상 클래스를 상속받은 자식 클래스는 추상 메소드를 반드시 구현해야 한다"]' AS jsonb),
  CAST('2025-06-30 00:00:00' AS TIMESTAMP)
),
(
  'Java에서 Thread의 상태 중 ''BLOCKED'' 상태가 발생하는 경우는 무엇인가?',
  'Java에서 Thread의 상태 중 ''BLOCKED'' 상태가 발생하는 경우는 무엇인가?\n\n1. Thread가 sleep() 메소드를 호출하여 일시 정지된 경우\n2. 다른 Thread가 점유하고 있는 모니터 락(monitor lock)을 획득하기 위해 대기하는 경우\n3. Thread가 join() 메소드를 호출하여 다른 Thread의 종료를 기다리는 경우\n4. Thread가 wait() 메소드를 호출하여 notify()를 기다리는 경우\n\n',
  3,
  'JAVA',
  2,
  CAST('["1. Thread가 sleep() 메소드를 호출하여 일시 정지된 경우","2. 다른 Thread가 점유하고 있는 모니터 락(monitor lock)을 획득하기 위해 대기하는 경우","3. Thread가 join() 메소드를 호출하여 다른 Thread의 종료를 기다리는 경우","4. Thread가 wait() 메소드를 호출하여 notify()를 기다리는 경우"]' AS jsonb),
  CAST('2025-06-30 00:00:00' AS TIMESTAMP)
);


UPDATE problems SET type = 'multiple' WHERE problem_id BETWEEN 1 AND 5;

CREATE INDEX idx_daily_learning_subject_date ON daily_learning(subject, date);

-- 스티커 테이블
CREATE TABLE sticker (
                         id BIGINT PRIMARY KEY,
                         name VARCHAR(255) NOT NULL,
                         image_url VARCHAR(255),
                         cost INTEGER NOT NULL,
                         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 멤버가 구매한 스티커
CREATE TABLE member_sticker (
                                member_id BIGINT NOT NULL,
                                sticker_id BIGINT NOT NULL,
                                purchased_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                PRIMARY KEY (member_id, sticker_id)

);

-- 가방 슬롯 테이블 (스티커 배치)
CREATE TABLE bag_slot (
                          member_id BIGINT NOT NULL,
                          sticker_id BIGINT NOT NULL,
                          slot_index INTEGER NOT NULL,
                          PRIMARY KEY (member_id, slot_index)
);


INSERT INTO sticker (id, name, image_url, cost, created_at) VALUES
(1,  '강심이',       '/assets/img/stickers/kangsim.png',       30, CURRENT_TIMESTAMP),
(2,  '고심이',       '/assets/img/stickers/kosim.png',         40, CURRENT_TIMESTAMP),
(3,  '사심이',       '/assets/img/stickers/sasim.png',         50, CURRENT_TIMESTAMP),
(4,  '토심이',       '/assets/img/stickers/tosim.png',         35, CURRENT_TIMESTAMP),
(11, 'basic_그림',   '/assets/img/stickers/basic_hospital.png', 10, CURRENT_TIMESTAMP),
(12, 'basic_약국',   '/assets/img/stickers/basic_pharcay.png',  10, CURRENT_TIMESTAMP),
(13, 'basic_자전거', '/assets/img/stickers/basic_bike.png',     10, CURRENT_TIMESTAMP),
(14, 'basic_카메라', '/assets/img/stickers/basic_camera.png',   10, CURRENT_TIMESTAMP),
(15, 'basic_AI',     '/assets/img/stickers/basic_AI.png',       10, CURRENT_TIMESTAMP);
