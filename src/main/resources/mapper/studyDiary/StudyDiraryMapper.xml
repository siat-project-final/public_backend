<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.takoyakki.backend.domain.studyDiary.repository.StudyDiraryMapper">

    <!-- 학습일지 등록 -->
    <insert id="insertStudyDiary" parameterType="StudyDiaryInsertRequestDto">
        INSERT INTO study_diary (
            member_id,
            title,
            contents,
            subject,
            ai_summary,
            created_at,
            updated_at,
            study_date,
            is_public,
            is_deleted,
            likes
        ) VALUES (
            #{memberId},
            #{title},
            #{content},
            #{subject},
            #{summary},
            NOW(),
            NOW(),
            CAST(#{date} AS DATE),
            #{isPublic},
            FALSE,
            0
        )
    </insert>

    <!-- 단건 조회 -->
    <select id="selectStudyDiary" parameterType="long" resultType="com.takoyakki.backend.domain.studyDiary.dto.response.StudyDiarySelectResponseDto">
        SELECT
            sd.diary_id       AS diaryId,
            sd.member_id      AS memberId,
            m.member_name     AS memberName,
            sd.title,
            sd.contents,
            sd.subject         AS subject,
            sd.ai_summary      AS aiSummary,
            sd.study_date      AS studyDate,
            sd.is_public       AS isPublic,
            sd.created_at      AS createdAt,
            sd.updated_at      AS updatedAt
        FROM
            study_diary sd
        LEFT OUTER JOIN members m ON sd.member_id = m.member_id
        WHERE
            sd.diary_id = #{diaryId}
            AND sd.is_deleted = FALSE
    </select>

    <!-- 수정 -->
    <update id="updateStudyDiary">
        UPDATE study_diary
        SET
            title = #{param2.title},
            contents = #{param2.contents}
        WHERE
            diary_id = #{param1}
    </update>

    <!-- 내 일지 목록 -->
    <select id="selectStudyDiaryList" parameterType="long" resultType="StudyDiarySelectResponseDto">
        SELECT
            diary_id       AS diaryId,
            member_id      AS memberId,
            title,
            contents,
            subject         AS subject,
            ai_summary      AS aiSummary,
            TO_CHAR(study_date, 'YYYY-MM-DD') AS studyDate,
            is_public       AS isPublic,
            created_at     AS createdAt,
            updated_at     AS updatedAt
        FROM
            study_diary
        WHERE
            member_id = #{memberId}
            AND is_deleted = FALSE
        ORDER BY
            study_date DESC
    </select>

    <!-- 회원 기준 전체 일지 조회 -->
    <select id="selectStudyDiariesByMemberId" parameterType="long" resultType="com.takoyakki.backend.domain.studyDiary.dto.response.StudyDiarySelectResponseDto">
        SELECT
            diary_id,
            member_id,
            title,
            contents,
            subject,
            created_at,
            updated_at,
            study_date,
            ai_summary,
            is_deleted,
            is_public,
            likes
        FROM
            study_diary
        WHERE
            member_id = #{memberId}
            AND is_deleted = FALSE
        ORDER BY
            study_date DESC
    </select>

    <!-- 일지 ID로 단건 조회 -->
    <select id="selectStudyDiaryById" parameterType="long" resultType="com.takoyakki.backend.domain.studyDiary.dto.response.StudyDiarySelectResponseDto">
        SELECT
            diary_id,
            member_id,
            title,
            contents,
            subject,
            created_at,
            updated_at,
            study_date,
            ai_summary,
            is_deleted,
            is_public,
            likes
        FROM
            study_diary
        WHERE
            diary_id = #{diaryId}
            AND is_deleted = FALSE
    </select>

    <!-- 공개 일지 목록 조회 -->
    <select id="selectStudyDiaryListPublic" resultType="StudyDiarySelectPublicListResponseDto">
        SELECT
            sd.diary_id       AS diaryId,
            m.member_name     AS memberName,
            sd.title,
            sd.contents,
            sd.subject         AS subject,
            sd.ai_summary      AS aiSummary,
            sd.study_date::date AS studyDate,
            sd.likes           AS likeCount
        FROM
            study_diary sd
        LEFT JOIN
            members m ON sd.member_id = m.member_id
        WHERE
            sd.is_public = TRUE
            AND sd.is_deleted = FALSE
        <if test="subject != null and subject != 'ALL'">
            AND sd.subject ILIKE #{subject}
        </if>
        ORDER BY
            sd.created_at DESC, sd.study_date DESC
    </select>

    <!-- 좋아요 증가/감소 -->
    <update id="changeStudyDiaryLike">
        UPDATE study_diary
        SET
            likes = likes +
                CASE
                    WHEN #{isLike} = TRUE THEN 1
                    ELSE -1
                END
        WHERE
            diary_id = #{diaryId}
    </update>

    <!--  삭제 기능 추가 -->
    <delete id="deleteDiary" parameterType="long">
        DELETE FROM study_diary
        WHERE diary_id = #{diaryId}
    </delete>

    <select id="selectStudyDiaryCount" resultType="int">
        SELECT
            COUNT(*)
        FROM
            study_diary
        WHERE
            member_id = #{memberId}
        AND
            is_deleted = FALSE
    </select>
</mapper>
